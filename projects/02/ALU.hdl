// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // zero the x input
    Mux16(a=x, b=false, sel=zx, out=xZero); // we set the sel to 0 or 1 depending on the operation we want to perform

    // negate the x input
    Not16(in=xZero, out=xNot); // we negate the previous output
    Mux16(a=xZero, b=xNot, sel=nx, out=xNegated); // based on the two outputs and sel (which depends on the operation), we see if the final output should be negated

    // zero the y input
    Mux16(a=y, b=false, sel=zy, out=yZero);

    // negate the y input
    Not16(in=yZero, out=yNot);
    Mux16(a=yZero, b=yNot, sel=ny, out=yNegated);

    // compute out = x + y (if 1) or x & y (if 0)
    Mux16(a=false, b=yNegated, sel=f, out=out1); // when f=0 return 0, and return y when f=1
    Add16(a=xNegated, b=out1, out=addXY); // now add xNegated (if it's 0, nothing changes)
    And16(a=xNegated, b=yNegated, out=andXY); // handles the "x & y" part
    Mux16(a=andXY, b=addXY, sel=f, out=fXY); // returns either the "x & y" or "x + y"

    // negate the output for the next step so there are two options
    Not16(in=fXY, out=notfXY);

    // out=16-bit output; 
    // ng=1 if (out < 0),  0 otherwise
    // no -> should the output be negated?
    Mux16(a=fXY, b=notfXY, sel=no, out=out, out[15]=ng, out[0..7]=msb, out[8..15]=lsb); // splitting the bits to establish if the least significant bits feature a 1 (2s compliment) to establish if it's negative
    Or8Way(in=msb, out=msbOr); // keep comparing bits to end up with a single output
    Or8Way(in=lsb, out=lsbOr); // same ^
    Or(a=msbOr, b=lsbOr, out=finalOr); // compare msb with lsb
    // zr -> 1 if (out == 0), 0 otherwise
    Not(in=finalOr, out=zr); // take the previous output and negate
}